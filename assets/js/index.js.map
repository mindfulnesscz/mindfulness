{"version":3,"file":"index.js","mappings":"mBAKA,MAwBA,EAxBqBA,IAEnB,MAAMC,EAASC,SAASC,cAAe,UACjCC,EAAMF,SAASG,gBAAiB,QAEtCD,EAAIE,MAAQ,kBACZL,EAAOM,iBAAkBH,GAEzB,MAAMI,EAAM,IAAIC,SAAS,CAAEC,EAASC,KAClCV,EAAOW,OAAS,KACdF,EAAS,SAAWV,EAAM,YAE5BC,EAAOY,QAAU,KACfF,EAAQ,UAAYX,EAAM,kCAQ9B,OAJAC,EAAOa,IAAMd,EAEbE,SAASa,KAAKC,YAAaf,GAEpBO,GCXTS,OAAOC,WAAWC,mBAAqB,ICRxB,MAIbC,YAAcC,GACZC,KAAKD,KAAOA,EAIdE,iBAAmBC,EAAcC,EAAeC,GAE9C,MAAMC,EAAI,IAAIC,KAEdD,EAAEE,QAASF,EAAEG,UAAY,GAEzB,MAAMC,EAAU,WAAaJ,EAAEK,cAE/B9B,SAAS+B,OAAST,EAAQ,IAAMC,EAAS,IAAMM,EAAU,UAW3DR,iBAAmBC,GAEjB,MAAMU,EAAOV,EAAQ,IAIfW,EAHgBC,mBAAoBlC,SAAS+B,QAG1BI,MAAO,KAEhC,IAAM,IAAIC,EAAI,EAAGA,EAAIH,EAAGI,OAAQD,IAAM,CAEpC,IAAIE,EAAIL,EAAGG,GAEX,KAAyB,KAAjBE,EAAEC,OAAQ,IAEhBD,EAAIA,EAAEE,UAAW,GACjBC,QAAQC,IAAKJ,GAIf,GAA0B,GAArBA,EAAEK,QAASX,GAEd,OAAOM,EAAEE,UAAWR,EAAKK,OAAQC,EAAED,QAKvC,OAAO,KAYThB,oBAAsBW,GACpBhC,SAAS+B,OAASC,EAAO,wBAG3BY,qBAIE,GAFAxB,KAAKyB,YAAc,GAEd7C,SAAS+B,QAA6B,IAAnB/B,SAAS+B,OAAe,CAE9C,MAAME,EAAKjC,SAAS+B,OAAOI,MAAO,KAElC,IAAM,IAAIC,EAAI,EAAGA,EAAIH,EAAGI,OAAQD,IAAM,CAEpC,IAAIE,EAAIL,EAAGG,GACX,KAAyB,KAAjBE,EAAEC,OAAQ,IAChBD,EAAIA,EAAEE,UAAW,GAGnB,MAAMM,EAAMR,EAAEH,MAAO,KAErBf,KAAKyB,YAAYC,EAAI,IAAMA,EAAI,GAEjCL,QAAQC,IAAKtB,KAAKyB,gBDjFgC,MAMxD,MAAME,EAAUhC,OAAOC,WAAWgC,YAAc,kBAMhDjC,OAAOkC,KAAKC,eAAgBnC,OAAOoC,eAMnCnD,SAASoD,iBAAkB,oBAAoB,KAG7C,MAAMC,EE1BF,uGAAuGC,KAAMC,UAAUC,WAClH,UAGA,UFwBT,GAAc,WAAVH,EACF,EAAYN,EAAUM,EAAVN,WAAqChC,OAAOC,WAAWyC,iBAAkBC,MAAMC,IACzFlB,QAAQC,IAAKiB,WAGZ,GAAe,WAAVN,EAAsB,CAK9B,MAAMO,EAAa5D,SAAS6D,cAAe,uBACrCC,EAAa9D,SAAS6D,cAAe,uBAErCE,EAAa,KAEbhD,OAAOiD,WAAa,KAGtBJ,EAAWK,MAAMC,QAAU,OAC3BJ,EAAWG,MAAMC,QAAU,QACtBnD,OAAOC,WAAWmD,SACrB,EAAYpB,EAAAA,kBAAoChC,OAAOC,WAAWyC,iBAAkBC,MAAMC,IACxFlB,QAAQC,IAAKiB,QAKjBC,EAAWK,MAAMC,QAAU,QAC3BJ,EAAWG,MAAMC,QAAS,OACpBnD,OAAOC,WAAWoD,UACtB,EAAYrB,EAAAA,kBAAmChC,OAAOC,WAAWyC,iBAAkBC,MAAMC,IACvFlB,QAAQC,IAAKiB,QAMrB,IAAIU,EAAMC,WAAYP,EAAY,GAElChD,OAAOwD,SAAS,KACdC,aAAcH,GACdA,EAAQC,WAAYP,EAAY,W","sources":["webpack://ess_backend/./src/helpers/loadScript.ts","webpack://ess_backend/./src/index.ts","webpack://ess_backend/./src/helpers/MindCookies.ts","webpack://ess_backend/./src/helpers/testDevice.ts"],"sourcesContent":["/**\n * Function that grabs url of a script and returns promise with onload function\n * @since 3.0 \n * \n **/\nconst loadScript = ( url:string ):Promise<unknown> =>{\n\n  const script = document.createElement( 'script' );\n  const att = document.createAttribute( 'type' );\n  \n  att.value = 'text/javascript';\n  script.setAttributeNode( att );\n\n  const ret = new Promise( ( resolve, reject ) =>{\n    script.onload = ()=>{\n      resolve( 'script' + url + ' loaded' );\n    };\n    script.onerror = ()=>{\n      reject( 'script ' + url + ' has encountered an error.' );\n    };\n  } );\n\n  script.src = url;\n\n  document.head.appendChild( script );\n\n  return ret;\n\n};\nexport default loadScript;","\n// modules\nimport testDevice from './helpers/testDevice';\nimport MindCookies from './helpers/MindCookies';\nimport loadScript from './helpers/loadScript';\n\n// type definitions\nimport './types/index';\n\n\n/**\n * Cookie handler disabled at the moment. Will be used elsewhere probably as a part of a module.\n * Starts Cookies handler to store data about intros and such\n * Currently only intro played is stored in cookies\n */ \nwindow.MindGlobal.MindCookiesHandler = new MindCookies( './' );\n\n\n/**\n * Defines the path of navigation scripts\n */\nconst navPath = window.MindGlobal.templateUrl + '/assets/js/nav/';\n\n\n/**\n * Allows use of ScrollTrigger on gsap for all components (Currently not used at all )\n */\nwindow.gsap.registerPlugin( window.ScrollTrigger );\n\n\n/**\n * Loading different content for different types of navigation (Mobile / Desktop)\n */\ndocument.addEventListener( 'DOMContentLoaded', () => {\n\n\n  const device:string = testDevice(); // devices | desktop\n\n  if( device == 'devices' ) {\n    loadScript( navPath + device + '.js' + '?ver=' + window.MindGlobal.templateVersion ).then( message=>{\n      console.log( message );\n    } );\n  }\n  else if ( device == 'desktop' ) {\n\n    // debounce onresize to load the navigation components script dynamically when needed.\n    // This is the way to go although the code is a little bit ugly.\n\n    const navDevices = document.querySelector( '#wmnav-cont-devices' ) as HTMLDivElement;\n    const navDesktop = document.querySelector( '#wmnav-cont-desktop' ) as HTMLDivElement;\n\n    const grabScript = ()=>{\n\n      if( window.innerWidth > 760 ) {\n\n        // Hides devices and loads script for desktop if not loaded yet\n        navDevices.style.display = 'none';\n        navDesktop.style.display = 'block';\n        if( !window.MindGlobal.navCube )\n          loadScript( navPath  + 'desktop.js' + '?ver=' + window.MindGlobal.templateVersion ).then( message=>{\n            console.log( message );\n          } );\n      }\n      else {\n        // Hides desktop nav and loads script for devices if not loaded yet\n        navDevices.style.display = 'block';\n        navDesktop.style.display= 'none';\n        if ( !window.MindGlobal.navSmall )\n          loadScript( navPath + 'devices.js' + '?ver=' + window.MindGlobal.templateVersion ).then( message=>{\n            console.log( message );\n          } );\n      }\n\n    };\n\n    let timer=setTimeout( grabScript, 0 );\n\n    window.onresize=()=>{\n      clearTimeout( timer );\n      timer = setTimeout( grabScript, 100 );\n    };\n  }\n} );\n\n\n\n\n","/*jshint esversion: 6 */\n\ninterface MindCookiesArr {\n  [key: string]: string;\n}\n\n\nexport default class MindCookies {\n  path: string;\n  arr_cookies: MindCookiesArr;\n\n  constructor ( path:string ) {\n    this.path = path;\n    //this.createCookiesArray();\n  }\n\n  static setCookie ( cname:string, cvalue:string, extime:number ) {\n\n    const d = new Date();\n\n    d.setTime( d.getTime() + ( extime ) );\n\n    const expires = 'expires=' + d.toUTCString();\n\n    document.cookie = cname + '=' + cvalue + ';' + expires + ';path=/';\n    \n  }\n\n  /**\n   * Gets cookie based on string slug. If the cookie doesn't exist, returns null.\n   * \n   * @param cname String slug of the cookie to be checked\n   * @returns String | null Returns string value of the cookie or null if the cookie not exists\n   * @since 1.0\n   */\n  static getCookie ( cname:string ):string | null {\n\n    const name = cname + '=';\n    const decodedCookie = decodeURIComponent( document.cookie );\n\n\n    const ca = decodedCookie.split( ';' );\n\n    for ( let i = 0; i < ca.length; i++ ) {\n\n      let c = ca[i];\n\n      while ( c.charAt( 0 ) == ' ' ) {\n\n        c = c.substring( 1 );\n        console.log( c );\n\n      }\n\n      if ( c.indexOf( name ) == 0 ) {\n\n        return c.substring( name.length, c.length );\n\n      }\n    }\n    \n    return null;\n  }\n\n\n\n  /**\n   * Deletes cookie based on slug name\n   * \n   * @param name String - Slug name of the cookie to be deleted\n   * @returns void\n   * @since 1.0\n   */\n  static deleteCookie ( name:string ):void {\n    document.cookie = name + '=; Max-Age=-99999999;';\n  }\n\n  createCookiesArray () {\n\n    this.arr_cookies = {};\n\n    if ( document.cookie && document.cookie != '' ) {\n\n      const ca = document.cookie.split( ';' );\n\n      for ( let i = 0; i < ca.length; i++ ) {\n\n        let c = ca[i];\n        while ( c.charAt( 0 ) == ' ' ) {\n          c = c.substring( 1 );\n        }\n\n        const csa = c.split( '=' );\n\n        this.arr_cookies[csa[0]] = csa[1];\n      }\n      console.log( this.arr_cookies );\n    }\n  }\n}","\n/**\n * Checks the size of window as well as the user Agent to see whether the website\n * is viewed on mobile device or desktop.\n * \n * @returns string - \"device\" | \"desktop\"\n * @since 3.0\n */\nexport default function testDevice ():string {\n\n  if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test( navigator.userAgent ) ) {\n    return 'devices';\n  }\n  else\n    return 'desktop';\n}"],"names":["url","script","document","createElement","att","createAttribute","value","setAttributeNode","ret","Promise","resolve","reject","onload","onerror","src","head","appendChild","window","MindGlobal","MindCookiesHandler","constructor","path","this","static","cname","cvalue","extime","d","Date","setTime","getTime","expires","toUTCString","cookie","name","ca","decodeURIComponent","split","i","length","c","charAt","substring","console","log","indexOf","createCookiesArray","arr_cookies","csa","navPath","templateUrl","gsap","registerPlugin","ScrollTrigger","addEventListener","device","test","navigator","userAgent","templateVersion","then","message","navDevices","querySelector","navDesktop","grabScript","innerWidth","style","display","navCube","navSmall","timer","setTimeout","onresize","clearTimeout"],"sourceRoot":""}